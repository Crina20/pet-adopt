// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @unique
  email       String  @unique
  fullName    String?
  phone       String?
  address     String?
  age         Int?
  picture     String?
  description String?

  isAdmin     Boolean @default(false)
  isActive    Boolean @default(true)

  animals Animal[]
  requestsMade     PetAdoption[] @relation("RequestsMade")
  requestsReceived PetAdoption[] @relation("RequestsReceived")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
}

model Animal {
  id          String   @id @default(cuid())
  name        String
  species     String
  breed       String?
  age         Int?
  gender      String
  description String?
  image       String?
  latitude    Float?
  longitude   Float?
  status      String   @default("available")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  adoptionRequests PetAdoption[]

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model PetAdoption{
  id      String @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  animalId String
  animal Animal @relation(fields: [animalId], references: [id])

  requestedById String
  requestedBy User @relation("RequestsMade", fields: [requestedById], references: [id])

  requestedToId String
  requestedTo User @relation("RequestsReceived", fields: [requestedToId], references: [id])

  status Int
}